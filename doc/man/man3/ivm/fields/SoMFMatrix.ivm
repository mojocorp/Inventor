NAME SoMFMatrix SoMMatrix "" {
multiple-value field containing any number of 4x4 matrices
}

INCLUDE fields/SoMFMatrix.h

DESC {
A multiple-value field that contains any number of 4x4 matrices.
\p
\cSoMFMatrices\. are written to file as sets of 16 floating point
numbers separated by whitespace.  When more than one value is present,
all of the values are enclosed in square brackets and separated by
commas; for example, two identity matrices might be written as:
\b
[ 1 0 0 0  0 1 0 0  0 0 1 0  0 0 0 1, 
  1 0 0 0  0 1 0 0  0 0 1 0  0 0 0 1 ]
\.
}
METHOD SetMx void setValue(float a11, float a12, float a13, float a14,
		 float a21, float a22, float a23, float a24,
		 float a31, float a32, float a33, float a34,
		 float a41, float a42, float a43, float a44) {
Makes this field contain one and only one value, which is the matrix
given by the 16 values.
}
METHOD "" static SoType getClassTypeId() {}
METHOD "" virtual void getTypeId() const {
Returns the type for this class or a particular object of this class.
}
METHOD Get const SbMatrix & operator [\|](int i) const {
Returns the \ai\.'th value of the field.  Indexing past the end of the
field (passing in \ai\. greater than \mgetNum()\.) will return garbage.
}
METHOD GetN const SbMatrix * getValues(int start) const {
Returns a pointer into the array of values in the field, starting at
index start.  The values are read-only; see the
\mstartEditing()\./\mfinishEditing()\. methods for a way of modifying values
in place.
}
METHOD "" int find(const SbMatrix & targetValue,
	SbBool addIfNotFound = FALSE) {
Finds the given value in the array and returns the index of that value
in the array.  If the value is not found, -1 is returned.  If
\aaddIfNotFound\. is set, then \atargetValue\. is added to the end of the
array (but -1 is still returned).
}
METHOD SetN void setValues(int start, int num,
	const SbMatrix *newValues) {
Sets \anum\. values starting at index \astart\. to the values in \anewValues\..
The array will be automatically be made larger to accomodate the new
values, if necessary.
}
METHOD Set1 void set1Value(int index, const SbMatrix & newValue) {
Sets the \aindex\.'th value in the array to \anewValue\..  The array will be
automatically expanded, if necessary.
}
METHOD " " const SbMatrix & operator =(const SbMatrix & newValue) {}
METHOD Set void setValue(const SbMatrix & newValue) {
Sets the first value in the array to \anewValue\., and deletes the second
and subsequent values.
}
METHOD IsEq int operator ==(const SoMFMatrix &f) const {}
METHOD IsNEq int operator !=(const SoMFMatrix &f) const {
Returns TRUE if all of the values of this field equal (do not
equal) those of the given field.  If the fields are different types FALSE will
always be returned (even if one field is an \cSoMFFloat\. with one
value of 1.0 and the other is an \cSoMFInt\. with a value of 1, for
example).
}
METHOD StartEdit SbMatrix *startEditing() {}
METHOD FinishEdit void finishEditing() {
\mstartEditing()\. returns a pointer to the internally-maintained array that 
can be modified.  The values in the array may be changed, but values cannot
be added or removed. It is illegal to call any other editing methods between 
\+\mstartEditing()\. and \mfinishEditing()\. (e.g.
\mset1Value()\., \msetValue()\., etc).\.\-\mStartEdit()\. and \mFinishEdit()\.
(e.g. \mSet1()\., \mSet()\., etc).\.
\p
Fields, engines or sensors connected to this field and sensors are not
notified that this field has changed until 
\+\mfinishEditing()\.\.\-\mFinishEdit()\.\. is called.  Calling
\+\mfinishEditing()\.\.\-\mFinishEdit()\.\. always sets the
\+\misDefault()\.\.\-\mIsDflt\.\. flag to FALSE and informs
engines and sensors that the field changed, even if none of the values
actually were changed.
}
