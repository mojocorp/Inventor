NAME SoMFString SoMString "" {
multiple-value field containing any number of strings
}

INCLUDE fields/SoMFString.h

DESC {
A multiple-value field that contains any number of strings.
\p
\cSoMFStrings\. are written to file as one or more strings within
double quotes.  Any characters (including newlines) may appear within
the quotes. To include a double quote character within the string,
precede it with a backslash.  For example:
\b
[ cowEnizer , "Scene Boy" , "He said, \\"I did not!\\"" ]
\.
}
METHOD SetStrs setValues(int start, int num, const char *strings[]) {
Sets \anum\. values, starting at index \astart\., to the strings in the given
character arrays.
}
METHOD SetStr setValue(const char *string) {
Deletes all values currently in this field and sets this field to
contain only the given string.
}
METHOD "" static SoType getClassTypeId() {}
METHOD "" virtual void getTypeId() const {
Returns the type for this class or a particular object of this class.
}
METHOD Get const SbString & operator [\|](int i) const {
Returns the \ai\.'th value of the field.  Indexing past the end of the
field (passing in \ai\. greater than \mgetNum()\.) will return garbage.
}
METHOD GetN const SbString * getValues(int start) const {
Returns a pointer into the array of values in the field, starting at
index \astart\..  The values are read-only; see the
\mstartEditing()\./\mfinishEditing()\. methods for a way of modifying values
in-place.
}
METHOD "" int find(const SbString & targetValue,
	SbBool addIfNotFound = FALSE) {
Finds the given value in the array and returns the index of that value
in the array.  If the value is not found, -1 is returned.  If
\aaddIfNotFound\. is set, then targetValue will be added to the end of the
array (but -1 is still returned).
}
METHOD SetN void setValues(int start, int num,
	const SbString *newValues) {
Sets \anum\. values starting at index \astart\. to the values in \anewValues\..
The array will be automatically be made larger to accomodate the new
values, if necessary.
}
METHOD Set1 void set1Value(int index, const SbString & newValue) {
Sets the \aindex\.'th value in the array to \anewValue\..  The array will be
automatically expanded, if necessary.
}
METHOD " " const SbString & operator =(const SbString & newValue) {}
METHOD Set void setValue(const SbString & newValue) {
Sets the first value in the array to \anewValue\., and deletes the second
and subsequent values.
}
METHOD IsEq int operator ==(const SoMFString &f) const {}
METHOD IsNEq int operator !=(const SoMFString &f) const {
Returns TRUE if all of the values of this field equal (do not
equal) those of the given field.  If the fields are different types FALSE will
always be returned (even if one field is an \cSoMFFloat\. with one
value of 1.0 and the other is an \cSoMFInt\. with a value of 1, for
example).
}
METHOD StartEdit SbString *startEditing() {}
METHOD FinishEdit void finishEditing() {
\mstartEditing()\. returns a pointer to the internally-maintained array that 
can be modified.  The values in the array may be changed, but values cannot
be added or removed.  It is illegal to call any other editing methods between 
\+\mstartEditing()\. and \mfinishEditing()\. (e.g.
\mset1Value()\., \msetValue()\., etc).\.\-\mStartEdit()\. and \mFinishEdit()\. 
(e.g. \mSet1()\., \mSet()\., etc).\.
\p
Fields, engines or sensors connected to this field and sensors are not
notified that this field has changed until 
\+\mfinishEditing()\.\.\-\mFinishEdit()\.\. is called.  Calling
\+\mfinishEditing()\.\.\-\mFinishEdit()\.\. always sets the
\+\misDefault()\.\.\-IsDflt\.\. flag to FALSE and informs
engines and sensors that the field changed, even if none of the values
actually were changed.
}
