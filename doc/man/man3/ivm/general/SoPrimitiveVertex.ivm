NAME SoPrimitiveVertex SoPrimVtx "" {
represents a vertex of a generated primitive
}

INCLUDE SoPrimitiveVertex.h

DESC {
An \cSoPrimitiveVertex\. represents a vertex of a primitive (triangle,
line segment, or point) that is being generated by an
\cSoCallbackAction\.. It contains an object-space point, normal,
texture coordinates, material index, and a pointer to an instance of
an \cSoDetail\. subclass. This detail may contain more information
about the vertex, or may be a NULL pointer if there is no such info.
\p
Instances of \cSoPrimitiveVertex\. are typically created on the stack
by shape classes while they are generating primitives. Anyone who
wants to save them as return values from \cSoCallbackAction\. should
probably make copies of them.
}

METHOD ""  SoPrimitiveVertex() {}
METHOD CreateCopy SoPrimitiveVertex(const SoPrimitiveVertex &pv) {}
METHOD "" ~SoPrimitiveVertex() {
Constructors and destructor. Note that copying a primitive vertex
copies the detail pointer, and not the detail itself.
}

METHOD getPt const SbVec3f & getPoint() const {}
METHOD getNorm const SbVec3f & getNormal() const {}
METHOD getTexCoords const SbVec4f & getTextureCoords() const {
These return the surface point, normal, and texture coordinates in
object space.
}

METHOD getMtlInd int getMaterialIndex() const {
Returns the index into the current set of materials of the material
active at the vertex.
}

METHOD getDtl const SoDetail * getDetail() const {
Returns the detail giving more information about the vertex. Note that
this pointer may be NULL if there is no more info.
}

METHOD "" SoPrimitiveVertex & operator =(const SoPrimitiveVertex &pv) {
Copies the given vertex. Note that just the pointer to the detail is
copied, and not the detail itself.
}
