'\"! tbl | mmdoc
'\"macro stdmacro
.ie n \{\
.   ds Cr \fB
.   ds Cb \fB
.\}
.el \{\
.   ds Cr \f7
.   ds Cb \f8
.\}
.TH SoDragPointDragger(3IV)
.SH NAME
SoDragPointDragger \(em object you can translate in 3D by dragging with the mouse 
.SH INHERITS FROM
SoBase > SoFieldContainer > SoNode > SoBaseKit > SoInteractionKit > SoDragger > SoDragPointDragger
.SH SYNOPSIS
.ps -1
\*(Cr#include <Inventor/draggers/SoDragPointDragger.h>
.sp
.in 1i
\f1Fields from class SoDragPointDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFVec3f
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbtranslation
.sp
.in 1i
\f1Fields from class SoDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisActive
.sp
.in 1i
\f1Fields from class SoInteractionKit:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbrenderCaching
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbboundingBoxCaching
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbrenderCulling
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbpickCulling
.sp
.in 1i
\f1Parts from class SoBaseKit:
.in 0.5i
.sp
.ta 21m
.in 1i+21n
.ti 0.5i
.ta 21m
.ds Pt \*(Cr(SoNodeKitListPart)
.ie \w'\*(Pt'>=21n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbcallbackList\*(Cr
.sp
.in 1i
\f1Methods from class SoDragPointDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Cr
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbSoDragPointDragger\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetJumpLimit\*(Cr(float limit)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crfloat
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetJumpLimit\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbshowNextDraggerSet\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic const SoNodekitCatalog *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassNodekitCatalog\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic SoType
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassTypeId\*(Cr()
.sp
.in 1i
\f1Methods from class SoDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddStartCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveStartCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddMotionCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveMotionCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddFinishCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveFinishCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddValueChangedCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveValueChangedCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbenableValueChangedCallbacks\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetMinGesture\*(Cr(int pixels)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crint
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetMinGesture\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic void
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetMinScale\*(Cr(float newMinScale)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic float
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetMinScale\*(Cr()
.sp
.in 1i
\f1Methods from class SoInteractionKit:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetPartAsPath\*(Cr(const SbName &partName, SoPath *surrogatePath )
.sp
.in 1i
\f1Methods from class SoBaseKit:
.in 0.5i
.sp
.ta 25m
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual const SoNodekitCatalog *
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetNodekitCatalog\*(Cr() const
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual SoNode *
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetPart\*(Cr(const SbName &partName, SbBool makeIfNeeded)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(CrSbString
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetPartString\*(Cr(const SoBase *part)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual SoNodeKitPath *
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbcreatePathToPart\*(Cr(const SbName &partName, SbBool makeIfNeeded, const SoPath *pathToExtend = NULL)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual SbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetPart\*(Cr(const SbName &partName, SoNode *newPart)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbset\*(Cr(char *partName, char *parameters)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbset\*(Cr(char *nameValuePairs)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crstatic SbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisSearchingChildren\*(Cr()
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crstatic void
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetSearchingChildren\*(Cr(SbBool newVal)
.sp
.in 1i
\f1Methods from class SoNode:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetOverride\*(Cr(SbBool state)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisOverride\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoNode *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbcopy\*(Cr(SbBool copyConnections = FALSE) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaffectsState\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic SoNode *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetByName\*(Cr(const SbName &name)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic int
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetByName\*(Cr(const SbName &name, SoNodeList &list)
.sp
.in 1i
\f1Methods from class SoFieldContainer:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetToDefaults\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbhasDefaultValues\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbfieldsAreEqual\*(Cr(const SoFieldContainer *fc) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbcopyFieldValues\*(Cr(const SoFieldContainer *fc, SbBool copyConnections = FALSE)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbget\*(Cr(SbString &fieldDataString)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual int
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetFields\*(Cr(SoFieldList &resultList) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SoField *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetField\*(Cr(const SbName &fieldName) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetFieldName\*(Cr(const SoField *field, SbName &fieldName) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisNotifyEnabled\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbenableNotify\*(Cr(SbBool flag)
.sp
.in 1i
\f1Methods from class SoBase:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbref\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbunref\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbunrefNoDelete\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbtouch\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SoType
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetTypeId\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisOfType\*(Cr(SoType type) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual void
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetName\*(Cr(const SbName &name)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SbName
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetName\*(Cr() const
.sp
.in 1i
\f1Macros from class SoBaseKit:
.in 0.5i
.sp
\*(CbSO_GET_PART\*(Cr(kit, partName, partClass)
	
.br
\*(CbSO_CHECK_PART\*(Cr(kit, partName, partClass)
	
.sp
.SH DESCRIPTION
\*(CbSoDragPointDragger\f1 is a compound dragger that translates in all three dimensions when dragged with the mouse. 
.sp
It is made up of six smaller draggers, which it displays two at a time. Each pair has one \f2plane\f1 dragger and one \f2line\f1
\&dragger. The line dragger is oriented perpendicular to the plane, so together the \f2plane/line pair\f1 lets you move through all of 3-space. 
.sp
DragPoint has a total of three such pairs, oriented along the x, y, and z axes
\&of its local space. You can cycle through the three pairs by hitting the \*(Cr<Control>\f1 key with the cursor over the dragger. (You need not press the mouse button.) 
.sp
The line draggers are \*(CbSoTranslate1Draggers\f1 and the plane draggers are \*(CbSoTranslate2Draggers\f1.
\&So you can use the \*(Cr<Shift>\f1 key to constrain the motion of a plane dragger along one of the two axes within the plane, as described in the \*(CbSoTranslate2Draggers\f1 man page. 
.sp
DragPoint adds extra feedback parts to provide a more intuitive
\&idea of where you are placed in three-space. There are three \f2feedback planes\f1 and three \f2feedback axes\f1; each corresponds to one of the plane or line draggers, but spans a much greater distance. When you drag along a line, that line's
\&larger feedback axis is displayed, and remains anchored in space while the dragger slides along it. This helps establish the motion of the dragger relative to the rest of the scene. Similarly, when you
\&drag within a plane, the larger (but transparent) feedback plane establishes a ground plane for you to move upon. The location of the dragger within the plane is pinpointed by two intersecting axes that
\&always cross below the cursor and extend to the edges of the plane. When you move dragPoint to the edge of the feedback plane (or line), the feedback will jump to a new location in that direction, so
\&that the dragger never leaves the feedback behind. 
.sp
The primary directions of motion are given by the local space of the dragger. Transforms earlier in the scene will affect the dragger, its children, and
\&the orientation of its directions of motion. 
.sp
This node has a \*(Cbtranslation\f1 field which always reflects its position in local space. Setting the field moves the dragger to that point. You can also connect fields of
\&other nodes or engines from this one to make them follow the dragger's motion. 
.sp
Although the child draggers each have their own resources defining default part geometries, the dragPoint dragger overrides
\&these with a new set of resources. It also defines resources for the feedback parts that it adds. These are detailed in the Dragger Resources section of the online reference page for this class. You
\&can change the parts in any instance of this dragger using \*(CbsetPart()\f1. 
.sp
You can make your program use different default resources for the parts by copying the file \*(Cb/usr/share/data/draggerDefaults/dragPointDragger.iv\f1 into your own directory, editing the file, and
\&then setting the environment variable \*(CbSO_DRAGGER_DIR\f1 to be a path to that directory. 
.SH FIELDS
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFVec3f
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbtranslation
.br
.in 1i
\f1Position of the dragger. 
.sp
.in 0.5i
.SH METHODS
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Cr
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbSoDragPointDragger\*(Cr()
.br
.in 1i
\f1Constructor. 
.sp
.in 0.5i
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetJumpLimit\*(Cr(float limit)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crfloat
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetJumpLimit\*(Cr() const
.br
.in 1i
\f1Set and get the point at which the feedback axes will jump to a new position. For example, if set to .1 (the default), the feedback axes will jump when the dragger gets within 10% of the end of the axis. 
.sp
.in 0.5i
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbshowNextDraggerSet\*(Cr()
.br
.in 1i
\f1The dragPoint dragger contains three pairs of draggers, each containing a plane dragger and a line dragger (see the Description above). The dragger starts with the (y-line/xz-plane) pair displayed. Calling
\&this method will cycle next through the (z-line/xy-plane), then the (x-line/yz-plane). 
.sp
.in 0.5i
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic const SoNodekitCatalog *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassNodekitCatalog\*(Cr() const
.br
.in 1i
\f1Returns an \*(CbSoNodekitCatalog\f1 for this class 
.sp
.in 0.5i
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic SoType
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassTypeId\*(Cr()
.br
.in 1i
\f1Returns type identifier for this class. 
.sp
.in 0.5i
.SH CATALOG PARTS
.ne 22
.TS
box, tab(!);
cb s  s  s
lb lb lb lb
lb lb lb lb
l  l  l  c.
All parts
!!!NULL by
Part Name!Part Type!Default Type!Default

callbackList!NodeKitListPart!--!yes
xTranslator!Translate1Dragger!--!yes
xyTranslator!Translate2Dragger!--!yes
xzTranslator!Translate2Dragger!--!yes
zTranslator!Translate1Dragger!--!yes
yzTranslator!Translate2Dragger!--!yes
yTranslator!Translate1Dragger!--!yes
xFeedback!Separator!--!yes
yFeedback!Separator!--!yes
zFeedback!Separator!--!yes
yzFeedback!Separator!--!yes
xzFeedback!Separator!--!yes
xyFeedback!Separator!--!yes

.TE
.ne 10
.TS
box, tab(!);
cb s  s
lb lb lbw(30n)
l  l  l.
Extra information for list parts from above table
.sp
Part Name!Container Type!Permissible Types

callbackList!Separator!T{
Callback, EventCallback
T}

.TE
.SH DRAGGER RESOURCES
.ta 20m
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXTranslatorTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white cylinder with axis aligned in X direction
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking this initiates linear motion in X direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXTranslatorTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow cylinder with axis aligned in X direction
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown when moving in X direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointYTranslatorTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	yTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white cylinder with axis aligned in Y direction
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking this initiates linear motion in Y direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointYTranslatorTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	yTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow cylinder with axis aligned in Y direction
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown when moving in Y direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointZTranslatorTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	zTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white cylinder with axis aligned in Z direction
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking this initiates linear motion in Z direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointZTranslatorTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	zTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow cylinder with axis aligned in Z direction
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown when moving in Z direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointYZTranslatorTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	yzTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white flattened cube within the yz plane of motion
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking this initiates planar motion in yz plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointYZTranslatorTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	yzTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow flattened cube within the yz plane of motion
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown when moving in yz plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXZTranslatorTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xzTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white flattened cube within the xz plane of motion
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking this initiates planar motion in xz plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXZTranslatorTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xzTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow flattened cube within the xz plane of motion
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown when moving in xz plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXYTranslatorTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xyTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white flattened cube within the xy plane of motion
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking this initiates planar motion in xy plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXYTranslatorTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xyTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow flattened cube within the xy plane of motion
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown when moving in xy plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXFeedback
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xFeedback
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	douple-headed purple arrow
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	feedback for motion in x direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointYFeedback
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	yFeedback
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	douple-headed purple arrow
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	feedback for motion in y direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointZFeedback
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	zFeedback
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	douple-headed purple arrow
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	feedback for motion in z direction
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointYZFeedback
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	yzFeedback
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	semi-transparent green square in yz plane
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	feedback for motion in yz plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXZFeedback
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xzFeedback
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	semi-transparent green square in yz plane
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	feedback for motion in xz plane
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdragPointXYFeedback
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	xyFeedback
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	semi-transparent green square in yz plane
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	feedback for motion in xy plane
.sp
.SH FILE FORMAT/DEFAULTS
.nf
\*(CrDragPointDragger {
.in 1i
.ta 31m
renderCaching	AUTO
boundingBoxCaching	AUTO
renderCulling	AUTO
pickCulling	AUTO
isActive	FALSE
translation	0 0 0
callbackList	NULL
xTranslator	Translate1Dragger {
}

xyTranslator	Translate2Dragger {
}

xzTranslator	Translate2Dragger {
}

zTranslator	Translate1Dragger {
}

yzTranslator	Translate2Dragger {
}

yTranslator	Translate1Dragger {
}

xFeedback	<dragPointXFeedback resource>
yFeedback	<dragPointYFeedback resource>
zFeedback	<dragPointZFeedback resource>
yzFeedback	<dragPointYZFeedback resource>
xzFeedback	<dragPointXZFeedback resource>
xyFeedback	<dragPointXYFeedback resource>
xTranslator.translator	<dragPointXTranslatorTranslator resource>
xTranslator.translatorActive	<dragPointXTranslatorTranslatorActive resource>
yTranslator.translator	<dragPointYTranslatorTranslator resource>
yTranslator.translatorActive	<dragPointYTranslatorTranslatorActive resource>
zTranslator.translator	<dragPointZTranslatorTranslator resource>
zTranslator.translatorActive	<dragPointZTranslatorTranslatorActive resource>
yzTranslator.translator	<dragPointYZTranslatorTranslator resource>
yzTranslator.translatorActive	<dragPointYZTranslatorTranslatorActive resource>
xzTranslator.translator	<dragPointXZTranslatorTranslator resource>
xzTranslator.translatorActive	<dragPointXZTranslatorTranslatorActive resource>
xyTranslator.translator	<dragPointXYTranslatorTranslator resource>
xyTranslator.translatorActive	<dragPointXYTranslatorTranslatorActive resource>
.in 0.5i
}
.SH SEE ALSO
\*(CbSoInteractionKit, SoDragger, SoCenterballDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger,
\&SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTransformerDragger, SoTranslate1Dragger,
\&SoTranslate2Dragger 

