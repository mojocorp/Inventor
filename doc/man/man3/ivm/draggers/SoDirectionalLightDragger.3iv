'\"! tbl | mmdoc
'\"macro stdmacro
.ie n \{\
.   ds Cr \fB
.   ds Cb \fB
.\}
.el \{\
.   ds Cr \f7
.   ds Cb \f8
.\}
.TH SoDirectionalLightDragger(3IV)
.SH NAME
SoDirectionalLightDragger \(em directional icon you rotate and translate by dragging with the mouse 
.SH INHERITS FROM
SoBase > SoFieldContainer > SoNode > SoBaseKit > SoInteractionKit > SoDragger > SoDirectionalLightDragger
.SH SYNOPSIS
.ps -1
\*(Cr#include <Inventor/draggers/SoDirectionalLightDragger.h>
.sp
.in 1i
\f1Fields from class SoDirectionalLightDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFRotation
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbrotation
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFVec3f
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbtranslation
.sp
.in 1i
\f1Fields from class SoDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisActive
.sp
.in 1i
\f1Fields from class SoInteractionKit:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbrenderCaching
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbboundingBoxCaching
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbrenderCulling
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFEnum
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbpickCulling
.sp
.in 1i
\f1Parts from class SoBaseKit:
.in 0.5i
.sp
.ta 21m
.in 1i+21n
.ti 0.5i
.ta 21m
.ds Pt \*(Cr(SoNodeKitListPart)
.ie \w'\*(Pt'>=21n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbcallbackList\*(Cr
.sp
.in 1i
\f1Methods from class SoDirectionalLightDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Cr
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbSoDirectionalLightDragger\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic const SoNodekitCatalog *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassNodekitCatalog\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic SoType
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassTypeId\*(Cr()
.sp
.in 1i
\f1Methods from class SoDragger:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddStartCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveStartCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddMotionCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveMotionCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddFinishCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveFinishCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaddValueChangedCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbremoveValueChangedCallback\*(Cr(SoDraggerCB *f, void *userData = NULL)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbenableValueChangedCallbacks\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetMinGesture\*(Cr(int pixels)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crint
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetMinGesture\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic void
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetMinScale\*(Cr(float newMinScale)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic float
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetMinScale\*(Cr()
.sp
.in 1i
\f1Methods from class SoInteractionKit:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetPartAsPath\*(Cr(const SbName &partName, SoPath *surrogatePath )
.sp
.in 1i
\f1Methods from class SoBaseKit:
.in 0.5i
.sp
.ta 25m
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual const SoNodekitCatalog *
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetNodekitCatalog\*(Cr() const
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual SoNode *
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetPart\*(Cr(const SbName &partName, SbBool makeIfNeeded)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(CrSbString
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetPartString\*(Cr(const SoBase *part)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual SoNodeKitPath *
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbcreatePathToPart\*(Cr(const SbName &partName, SbBool makeIfNeeded, const SoPath *pathToExtend = NULL)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crvirtual SbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetPart\*(Cr(const SbName &partName, SoNode *newPart)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbset\*(Cr(char *partName, char *parameters)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbset\*(Cr(char *nameValuePairs)
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crstatic SbBool
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisSearchingChildren\*(Cr()
.br
.in 1i+25n
.ti 0.5i
.ta 25m
.ds Pt \*(Crstatic void
.ie \w'\*(Pt'>=25n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetSearchingChildren\*(Cr(SbBool newVal)
.sp
.in 1i
\f1Methods from class SoNode:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetOverride\*(Cr(SbBool state)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisOverride\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoNode *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbcopy\*(Cr(SbBool copyConnections = FALSE) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbaffectsState\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic SoNode *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetByName\*(Cr(const SbName &name)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic int
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetByName\*(Cr(const SbName &name, SoNodeList &list)
.sp
.in 1i
\f1Methods from class SoFieldContainer:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetToDefaults\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbhasDefaultValues\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbfieldsAreEqual\*(Cr(const SoFieldContainer *fc) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbcopyFieldValues\*(Cr(const SoFieldContainer *fc, SbBool copyConnections = FALSE)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbget\*(Cr(SbString &fieldDataString)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual int
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetFields\*(Cr(SoFieldList &resultList) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SoField *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetField\*(Cr(const SbName &fieldName) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetFieldName\*(Cr(const SoField *field, SbName &fieldName) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisNotifyEnabled\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbenableNotify\*(Cr(SbBool flag)
.sp
.in 1i
\f1Methods from class SoBase:
.in 0.5i
.sp
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbref\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbunref\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbunrefNoDelete\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvoid
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbtouch\*(Cr()
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SoType
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetTypeId\*(Cr() const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSbBool
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbisOfType\*(Cr(SoType type) const
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual void
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbsetName\*(Cr(const SbName &name)
.br
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crvirtual SbName
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetName\*(Cr() const
.sp
.in 1i
\f1Macros from class SoBaseKit:
.in 0.5i
.sp
\*(CbSO_GET_PART\*(Cr(kit, partName, partClass)
	
.br
\*(CbSO_CHECK_PART\*(Cr(kit, partName, partClass)
	
.sp
.SH DESCRIPTION
\*(CbSoDirectionalLightDragger\f1 is a composite dragger. It looks like a sun with a large arrow coming out of it. The arrow can be rotated about the sun by dragging with the mouse; its orientation is given by the \*(Cbrotation\f1 field. You can also
\&drag the sun (and the arrow with it) through 3-space. The location is stored in the \*(Cbtranslation\f1 field. 
.sp
The dragger uses an \*(CbSoRotateSphericalDragger\f1 for changing the rotation. Instead of using the default spherical geometry, this dragger
\&uses an arrow shape. 
.sp
The sun is an \*(CbSoDragPointDragger\f1. Dragging it edits the \*(Cbtranslation\f1 field; conversely, if you change the \*(Cbtranslation\f1 field the sun will move to that new location, bringing the arrow with it. The sun looks and behaves
\&just like the sun in an \*(CbSoPointLightDragger\f1, as does the \*(Cbmaterial\f1 part. See the \*(CbSoPointLightDragger\f1 man page for details. 
.sp
\f2Remember:\f1 This is \f2not\f1 a light source! It just looks like one. If you want to move a light with this dragger, you can either: 
.sp
[a] Use
\&an \*(CbSoDirectionalLightManip\f1, which is subclassed from \*(CbSoLight\f1. It creates an \*(CbSoDirectionalLightDragger\f1 and uses it as the interface to change the \*(Cbdirection\f1 of its light source (see the \*(CbSoDirectionalLightManip\f1 man page). The manipulator also edits the \*(Cbmaterial\f1 part of this dragger to match the
\&color of light the manipulator is producing. However, the directional light manipulator will ignore the \*(Cbtranslation\f1 field, because a directional light has no location or translation field. So in this case the translation
\&dragger merely allows you to move the physical arrow to wherever you'd like it to be. 
.sp
[b] Put an \*(CbSoTransform\f1 under an \*(CbSoTransformSeparator\f1. Add the \*(CbSoDirectionalLight\f1 as the next child. Use a field-to-field connection between the \*(Cbrotation\f1 fields of this dragger
\&and the transform node to synchronize the light with this dragger. 
.sp
[c] Use engines to connect the \*(Cbrotation\f1 field of this dragger to the \*(Cbdirection\f1 field of an \*(CbSoDirectionalLight\f1. Use the \*(Cbrotation\f1 as input to an \*(CbSoComposeMatrix\f1 engine. Then, use an \*(CbSoTransformVec3f\f1 engine
\&to apply that matrix to (0,0,-1), the default light direction. 
.sp
You can change the parts in any instance of this dragger using \*(CbsetPart()\f1. The default part geometries are defined as resources for this \*(CbSoDirectionalLightDragger\f1 class. They
\&are detailed in the Dragger Resources section of the online reference page for this class. You can make your program use different default resources for the parts by copying the file \*(Cb/usr/share/data/draggerDefaults/directionalLightDragger.iv\f1 into your own directory,
\&editing the file, and then setting the environment variable \*(CbSO_DRAGGER_DIR\f1 to be a path to that directory. 
.SH FIELDS
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFRotation
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbrotation
.br
.in 1i
\f1Orientation of the rotating part (an arrow by default). 
.sp
.in 0.5i
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(CrSoSFVec3f
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(Cbtranslation
.br
.in 1i
\f1Position of the origin of the directional light dragger.
.sp
.in 0.5i
.SH METHODS
.ta 20m
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Cr
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbSoDirectionalLightDragger\*(Cr()
.br
.in 1i
\f1Constructor. 
.sp
.in 0.5i
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic const SoNodekitCatalog *
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassNodekitCatalog\*(Cr() const
.br
.in 1i
\f1Returns an \*(CbSoNodekitCatalog\f1 for this class 
.sp
.in 0.5i
.in 1i+20n
.ti 0.5i
.ta 20m
.ds Pt \*(Crstatic SoType
.ie \w'\*(Pt'>=20n \{\
.ne 3
\*(Pt
.ti 0.5i
	\c\
\}
.el\{\
.ne 2
\*(Pt	\c\
\}
\*(CbgetClassTypeId\*(Cr()
.br
.in 1i
\f1Returns type identifier for this class. 
.sp
.in 0.5i
.SH CATALOG PARTS
.ne 14
.TS
box, tab(!);
cb s  s  s
lb lb lb lb
lb lb lb lb
l  l  l  c.
All parts
!!!NULL by
Part Name!Part Type!Default Type!Default

callbackList!NodeKitListPart!--!yes
material!Material!--!yes
translatorRotInv!Rotation!--!yes
translator!DragPointDragger!--!yes
rotator!RotateSphericalDragger!--!yes

.TE
.ne 10
.TS
box, tab(!);
cb s  s
lb lb lbw(30n)
l  l  l.
Extra information for list parts from above table
.sp
Part Name!Container Type!Permissible Types

callbackList!Separator!T{
Callback, EventCallback
T}

.TE
.SH DRAGGER RESOURCES
.ta 20m
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightRotatorRotator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	rotator.rotator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white arrow that goes through the sun
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking this begins rotation of the arrow about the sun-shape
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightRotatorRotatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	rotator.rotatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow arrow that goes through the sun
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	displayed while the arrow is being rotated
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightRotatorFeedback
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	rotator.feedback
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	empty Separator
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	this disables display of the axes that a rotateSpherical dragger uses by default
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightRotatorFeedbackActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	rotator.feedbackActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	empty Separator
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	this disables display of the axes that a rotateSpherical dragger uses by default
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightOverallMaterial
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Part:	material
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white. half strength emissive, half strength diffuse
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	sets material for the sun shape when stationary. Resource for the moving sun, directionalLightTranslatorPlaneTranslatorActive, contains a yellow material for highlighting.
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightTranslatorPlaneTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Parts:	translator.yzTranslator.translator
.br
	translator.xzTranslator.translator
.br
	translator.xyTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	sun shape with no material
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking these parts initiates dragging by the yz, xz, and xy planar draggers respectively.
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightTranslatorPlaneTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Parts:	translator.yzTranslator.translatorActive
.br
	translator.xzTranslator.translatorActive
.br
	translator.xyTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow sun shape
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown during planar dragging in the yz, xz, and xy planes respectively.
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightTranslatorLineTranslator
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Parts:	translator.xTranslator.translator
.br
	translator.yTranslator.translator
.br
	translator.zTranslator.translator
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	white cylinder
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	picking these parts initiates dragging in the x, y, and z linear draggers respectively.
.sp
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Resource:	\*(CbdirectionalLightTranslatorLineTranslatorActive
.br
\f1.in 0n+.5i
.ti 0n+.5i
.ta 18m
Parts:	translator.xTranslator.translatorActive
.br
	translator.yTranslator.translatorActive
.br
	translator.zTranslator.translatorActive
.br
.in 0n+.5i
.ti 0n+.5i
.ta 18m
Appearance:	yellow cylinder
.br
.in 20n+.5i
.ti 0n+.5i
.ta 18m
Description:	shown during linear dragging in the x, y, and z directions respectively.
.sp
.SH FILE FORMAT/DEFAULTS
.nf
\*(CrDirectionalLightDragger {
.in 1i
.ta 42m
renderCaching	AUTO
boundingBoxCaching	AUTO
renderCulling	AUTO
pickCulling	AUTO
isActive	FALSE
translation	0 0 0
rotation	0 0 1  0
callbackList	NULL
material	<directionalLightOverallMaterial resource>
translatorRotInv	NULL
translator	DragPointDragger {
}

rotator	RotateSphericalDragger {
}

rotator.rotator	<directionalLightRotatorRotator resource>
rotator.rotatorActive	<directionalLightRotatorRotatorActive resource>
rotator.feedback	<directionalLightRotatorFeedback resource>
rotator.feedbackActive	<directionalLightRotatorFeedbackActive resource>
translator.yzTranslator.translator	<directionalLightTranslatorPlaneTranslator resource>
translator.xzTranslator.translator	<directionalLightTranslatorPlaneTranslator resource>
translator.xyTranslator.translator	<directionalLightTranslatorPlaneTranslator resource>
translator.yzTranslator.translatorActive	<directionalLightTranslatorPlaneTranslatorActive resource>
translator.xzTranslator.translatorActive	<directionalLightTranslatorPlaneTranslatorActive resource>
translator.xyTranslator.translatorActive	<directionalLightTranslatorPlaneTranslatorActive resource>
translator.xTranslator.translator	<directionalLightTranslatorLineTranslator resource>
translator.yTranslator.translator	<directionalLightTranslatorLineTranslator resource>
translator.zTranslator.translator	<directionalLightTranslatorLineTranslator resource>
translator.xTranslator.translatorActive	<directionalLightTranslatorLineTranslatorActive resource>
translator.yTranslator.translatorActive	<directionalLightTranslatorLineTranslatorActive resource>
translator.zTranslator.translatorActive	<directionalLightTranslatorLineTranslatorActive resource>
.in 0.5i
}
.SH SEE ALSO
\*(CbSoInteractionKit, SoDragger, SoCenterballDragger, SoDragPointDragger, SoHandleBoxDragger, SoJackDragger, SoPointLightDragger, SoRotateCylindricalDragger, SoRotateDiscDragger, SoRotateSphericalDragger, SoScale1Dragger,
\&SoScale2Dragger, SoScale2UniformDragger, SoScaleUniformDragger, SoSpotLightDragger, SoTabBoxDragger, SoTabPlaneDragger, SoTrackballDragger, SoTransformBoxDragger, SoTransformerDragger, SoTranslate1Dragger,
\&SoTranslate2Dragger 

