NAME SoXtSpaceball SoXtSpball  SO_XT_SPBALL_ {
translates and reports events for the spaceball
}

INCLUDE Xt/devices/SoXtSpaceball.h

ENUM Mask {
MOTION "Spaceball translation and rotation events",
PRESS "Spaceball button press events",
RELEASE "Spaceball button release events",
ALL "All spaceball events"
}

DESC {
This class manages events generated by the spaceball, including
spaceball motion (\cSoMotion3Event\.), and spaceball button press 
and release events (\cSoSpaceballButtonEvent\.).
}

METHOD "" SoXtSpaceball(SoXtSpaceball::Mask mask = SoXtSpaceball::ALL) {}
METHOD "CreateD" SoXtSpaceball(Display *d, SoXtSpaceball::Mask mask = SoXtSpaceball::ALL) {}
METHOD "" ~SoXtSpaceball() {
Constructor and destructor. Pass to the constructor an enumerated
value specifying which spaceball events are of interest. Only those
events will be reported to the callback routine registered on
each widget. The first constructor uses the X display which
was set in
\+\mSoXt::init()\..\.
\-\mSoXtInit()\..\.
}

METHOD setRotScaleFactor void setRotationScaleFactor(float f) {}
METHOD getRotScaleFactor float getRotationScaleFactor() const {
Set and get the rotation scale factor.
The scale factor is applied to the rotation value generated
by the spaceball device. The default rotation scale factor is .006.
}

METHOD setXlateScaleFactor void setTranslationScaleFactor(float f) {}
METHOD getXlateScaleFactor float getTranslationScaleFactor() const {
Set and get the translation scale factor.
The scale factor is applied to the translation value generated
by the spaceball device. The default translation scale factor is .006.
}

METHOD "" static SbBool	exists() {}
METHOD existsD static SbBool	exists(Display *d) {
This returns TRUE if the spaceball exists, either
on the X display which was set in
\+\mSoXt::init()\.,\.
\-\mSoXtInit()\.,\.
or on the passed display.
}

ALSO { SoXt, SoXtDevice, SoMotion3Event, SoSpaceballButtonEvent }
